2章 Bツリーの基本
Bツリーはもっともポピュラーなストレージ構造のひとつ。

二分探索木
二分探索木（BST）はソートされたインメモリのデータ構造であり、効率的なキーと値の検索に使用される。
BSTは複数のノードからなる。各ツリーノードはキーによって表され、値がこのキーに関連付けられる。
またそれぞれが2つの子ポインターを持つ。
BSTは単一のノードから開始されこれがルートノードと呼ばれる。ツリー内に存在できるルートは1つのみ。
各ノードでは検索範囲が左側と右側のサブツリーに分割される。
ノードのキーは左側のサブツリーに格納されているすべてのキーより大きく、右側のサブツリーに格納されているすべてのキーより小さくなる。
→ツリーのルートから左側のポインタをたどってリーフレベル（子を持たないノード）まで移動するとツリー内で最小のキーと
　それに関連づけられた値を保持しているノードに到達する。
　同様に右側へたどれば最大のキーとそれに関連付けられる値を保持しているノードに到達する。
ツリーのバランシング
挿入操作の際に従うべき特定のパターンはない。したがって要素の挿入によってツリーのバランスが保たれていない場合にも陥る。
→枝の一方が他方より長くなる状況になる。
　そうなった場合検索は極端に遅くなる。
バランスが保たれたツリーとは高さがlog2Nであるツリーであると定義される。
この場合のNはツリーに含まれる項目の総数。2つのサブツリー間の高さは1より大きくなることはない。
バランシングしないとパフォーマンスのメリットが失われ挿入と削除の順序によってツリーの形が左右される。
ツリーの枝の片方に新しい要素を追加してその枝を長くし他方の枝はそのままにするのではなく、
1つの操作が終わるたびにツリーのバランスが取れるように調整する。
ツリーのバランスを保つ方法としてノードが追加または削除された後で回転操作を実行する。
挿入によって枝のバランスが保たれなくなった場合、中央のノードを中心にしてそららのノードを回転できる。
そうすることによってバランスを保つ。
ディスクベースのストレージ用のツリー
BSTをディスク上で維持しようとするといくつかの問題に突き当たる。
問題1.局所性
　　　→要素はランダムな順序で追加されるので新しく追加されたノードがその親の近くに書き込まれることは保証できない。
　　　例えばノードの子ポインタが複数のディスクページにまたがる可能性がある。
　　　この状況はツリーレイアウトを変更しページ化二分木を使用するとある程度改善できる。
問題2.ツリーの高さ
　　　→二分木で許容されるファンアウトは2のみなので高さはツリーに含まれる要素の数の2進対数になる。
　　　　つまり検査対象の要素を検出するにはシークをO(log2N)回実行する必要があり、ディスク転送を同じ回数やる必要がある。
単純なディスク上のBSTの実装では比較とおなじ回数だけシークが必要になる。＝局所性の概念が組み込まれていない。
そのためディスク向けの実装に適したツリーは以下の特徴を持つ必要がある。
・大きなファンアウトで隣接するキーの局所性を改善する
・ツリーの高さを低く保ちノードをたどるときのシークの回数を改善する。
ディスクベースの構造
従来のアルゴリズムの大半は回転式のディスクがもっとも広く普及していた永続的ストレージメディア時代に開発された。
時代が進んでストレージメディアとしてフラッシュドライブなどが新しく開発されるとそれらが刺激となって新しいアルゴリズムや
既存のアルゴリズムが変更されてきた。
最近では不揮発でバイト単位でアクセスが可能なストレージで動作するように最適化された新しいタイプのデータ構造が登場している。
回転式のディスクではシークによってランダムな読み取りのコストが増大する。
→ディスクを回転させ機械仕掛けのヘッドを読み取り/書き込みの位置に移動させることが必要。
ソリッドステートドライブ
SSDには稼働箇所がない。標準的なSSDはメモリセルで構成されている。
メモリセルが結合されてストリングを構成しストリングが結合されてアレイを構成しアレイが結合されて
ページを構成しページが結合されてブロックを構成する。
1つのセルには1つまたは複数ビットのデータを格納できる。
ページのサイズはデバイスごとに異なるが標準的には2kbから16kbの範囲内。